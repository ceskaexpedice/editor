buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "at.bxm.gradleplugins:gradle-svntools-plugin:latest.release"
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
    }
}

group 'cz.incad.kramerius'
version '5.1.1'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'gwt'
apply plugin: 'at.bxm.svntools'
apply plugin: 'maven'


sourceCompatibility = 1.8
targetCompatibility = 1.8

def krameriusGithubUrl = 'https://github.com/ceskaexpedice/kramerius/trunk'
def krameriusModulesPath = 'kramerius_modules'
def gwtVersion = '2.4.0'
def guiceVersion = '3.0'

war {
    archiveName = 'editor.war'
}

gwt {
    gwtVersion = '2.4.0'
    modules 'cz.incad.kramerius.editor.Editor'
}

configurations {
    provided
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        test.compileClasspath += configurations.provided
        test.runtimeClasspath += configurations.provided
    }
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()

    maven {
        url 'http://download.java.net/maven/2/'
    }

    maven {
        url 'http://m2.duraspace.org/content/repositories/releases'
    }

    maven {
        url 'https://maven.java.net/content/repositories/snapshots'
    }

    maven {
        url 'http://guiceyfruit.googlecode.com/svn/repo/releases'
    }

    maven {
        url 'http://guiceyfruit.googlecode.com/svn/repo/releases'
    }

    maven {
        url 'http://jsdoctk-plugin.googlecode.com/svn/repo'
    }

    maven {
        url 'http://repository.springsource.com/maven/bundles/external'
    }

    maven {
        url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases'
    }

    maven {
        url 'http://download.osgeo.org/webdav/geotools'
    }

    maven {
        url 'http://repo.jfrog.org/artifactory/libs-releases'
    }

    maven {
        url 'https://maven.atlassian.com/content/groups/public'
    }

    maven {
        url 'http://jbig2-imageio.googlecode.com/svn/maven-repository'
    }

    maven {
        url 'http://kramerius.googlecode.com/svn/mvnrepo'
    }
}

dependencies {
    runtime "com.google.gwt:gwt-servlet:${gwtVersion}"
    providedCompile "javax.servlet.jsp:jsp-api:2.1"
    providedCompile "javax.servlet:servlet-api:2.5"
    providedCompile "com.google.gwt:gwt-dev:${gwtVersion}"
    providedCompile "com.google.gwt:gwt-user:${gwtVersion}"

    compile fileTree(dir: "kramerius_modules/shared/common/build/libs", include: "*.jar")
    compile fileTree(dir: "kramerius_modules/security/security-core/build/libs", include: "*.jar")
    compile fileTree(dir: "kramerius_modules/processes/import-jaxb/build/libs", include: "*.jar")

    //compile fileTree(dir: "kramerius_modules/security-core/build/libs", include: "*.jar")

    testCompile "junit:junit:4.7"
    testCompile "org.easymock:easymock:3.0"



    compile "commons-io:commons-io:2.3"
    compile "com.google.gwt.inject:gin:1.0"
    compile "org.antlr:stringtemplate:3.2.1"
    compile "com.sun.jersey:jersey-json:1.17.1"
    compile "org.codehaus.jettison:jettison:1.1"
    compile "net.sf.json-lib:json-lib:2.3:jdk15"
    compile "com.google.code.findbugs:jsr305:1.3.9"
    compile "com.allen-sauer.gwt.dnd:gwt-dnd:3.1.2"
    compile "com.google.inject:guice:${guiceVersion}"
    compile "org.apache.ws.commons.axiom:axiom-api:1.2.14"
    compile "org.apache.ws.commons.axiom:axiom-impl:1.2.14"
    compile "net.customware.gwt.dispatch:gwt-dispatch:1.1.0"
    compile "commons-configuration:commons-configuration:1.6"
    compile "com.sun.jersey.contribs:jersey-apache-client:1.17.1"
    compile "com.google.inject.extensions:guice-servlet:${guiceVersion}"

    /******- Copied from common project  -******/
    // TODO: Do it better
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'javax.servlet:servlet-api:2.5'
    compile 'org.json:json:20140107'
    compile 'commons-codec:commons-codec:1.5'
    compile 'org.apache.pdfbox:pdfbox:2.0.2'
    compile 'com.levigo.jbig2:levigo-jbig2-imageio:1.6.5'
    compile 'com.ibm.icu:icu4j:56.1'
    compile 'com.google.guava:guava:27.1-jre'
    compile 'org.bouncycastle:bcprov-jdk15:1.44'
    compile 'org.bouncycastle:bcmail-jdk15:1.44'
    compile 'org.apache.solr:solr-solrj:6.2.1'
    
    compile "javax.mail:mail:1.4.1"
    compile "com.google.gwt:gwt-servlet:2.4.0"
    compile "commons-io:commons-io:2.3"
    compile "commons-codec:commons-codec:1.5"
    compile "com.lowagie:itext:2.1.7"
    compile "org.antlr:stringtemplate:3.2.1"

    compile 'fast-md5:fast-md5:2.5'


    compile "commons-configuration:commons-configuration:1.6"
    compile "org.apache.commons:commons-lang3:3.5"

    compile group: 'org.apache.commons', name: 'commons-pool2', version: '2.4.2'


    compile "javax.media.jai:com.springsource.javax.media.jai.core:1.1.3"
    compile "javax.media.jai:com.springsource.javax.media.jai.codec:1.1.3"


    compile "commons-dbcp:commons-dbcp:1.4"
    compile "net.sf.json-lib:json-lib:2.3:jdk15"
    
    compile 'javax.ws.rs:jsr311-api:1.1.1'
    
    // for audio support
    compile 'org.ehcache:ehcache:3.3.0'
    compile 'org.apache.httpcomponents:httpclient:4.3.2'
 

    // dependencies in maven profile
    testCompile "xmlunit:xmlunit:1.3"

    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.apache.solr:solr-core:6.3.0'

    //akubra storage
    compile 'org.akubraproject:akubra-core:0.4.0'
    compile ('org.akubraproject:akubra-fs:0.4.0') {
        exclude group: 'com.google.guava', module: 'guava-collections'
        exclude group: 'com.google.guava', module: 'guava-annotations'
        exclude group: 'com.google.guava', module: 'guava-primitives'
        exclude group: 'com.google.guava', module: 'guava-base'
    }
    compile ('org.akubraproject:akubra-map:0.4.0'){
        exclude group: 'com.google.guava', module: 'guava-collections'
        exclude group: 'com.google.guava', module: 'guava-annotations'
        exclude group: 'com.google.guava', module: 'guava-primitives'
        exclude group: 'com.google.guava', module: 'guava-base'
    }
    compile 'com.hazelcast:hazelcast-all:3.11.2'
    
	/******- End of common dependencies  -******/

}

task exportBuildSrc(type: at.bxm.gradleplugins.svntools.tasks.SvnExport) {
    svnUrl = "${krameriusGithubUrl}/buildSrc"
    targetDir = "${krameriusModulesPath}/buildSrc"
}


task exportCommon(type: at.bxm.gradleplugins.svntools.tasks.SvnExport) {
    svnUrl = "${krameriusGithubUrl}/shared/common"
    targetDir = "${krameriusModulesPath}/shared/common"
}

task exportSecurityCore(type: at.bxm.gradleplugins.svntools.tasks.SvnExport) {
    svnUrl = "${krameriusGithubUrl}/security/security-core"
    targetDir = "${krameriusModulesPath}/security/security-core"
}

task exportImportJaxb(type: at.bxm.gradleplugins.svntools.tasks.SvnExport) {
    svnUrl = "${krameriusGithubUrl}/processes/import-jaxb"
    targetDir = "${krameriusModulesPath}/processes/import-jaxb"
}



//-- Build libraries with original configurations from Kramerius Github repo --//

task exportBuild(type: at.bxm.gradleplugins.svntools.tasks.SvnExport,
        dependsOn: exportCommon) {

    svnUrl = "${krameriusGithubUrl}/build.gradle"
    targetDir = "${krameriusModulesPath}/build.gradle"
}

task exportSettings(type: at.bxm.gradleplugins.svntools.tasks.SvnExport,
        dependsOn: exportCommon) {

    svnUrl = "${krameriusGithubUrl}/settings.gradle"
    targetDir = "${krameriusModulesPath}/settings.gradle"
}

//----------------------------------------------------------------------------//

task exportGradleSettings(dependsOn: [exportBuild, exportSettings]) << {
    println("exportSettings: done")
}

task exportAll(dependsOn: [exportCommon,  exportBuildSrc,
                           exportSecurityCore, exportGradleSettings,exportImportJaxb]) << {
//task exportAll(dependsOn: [exportCommon,  exportBuildSrc,
//                            exportGradleSettings ]) << {
    println("exportAll: done")
}

task buildModules(type: GradleBuild) {
	println "Building modules"
    dir = "${krameriusModulesPath}"
    setTasks([ ':processes:import-jaxb:jar', ':security:security-core:jar', ':shared:common:jar'])
}

//if (!(new File("${krameriusModulesPath}").exists())) {
buildModules.dependsOn(exportAll)
//}

task prepareModules(dependsOn: buildModules) << {
    println("prepareModules: done")
}

compileJava.dependsOn prepareModules

clean.doFirst {
    delete "${krameriusModulesPath}"
}